#+TITLE: Emacs configuration file

* Theme 

Theme configuration 

I have a few options, for easy switching. 

#+BEGIN_SRC emacs-lisp
(if (display-graphic-p)
(use-package doom-themes
  :ensure t
;;  :config (load-theme 'doom-gruvbox) ;; divider ok, but comments too pale
  :config (load-theme 'doom-dark+)
;;  :config (load-theme 'doom-acario-dark) ;; duvider ok, but not great colors.
;;  :config (load-theme 'doom-ephemeral) ;; looks reasonable, but too dark. not great on gui.
;;  :config (load-theme 'doom-laserwave)
;;  :config (load-theme 'doom-molokai)
;;  :config (load-theme 'doom-monokai-pro)
;;  :config (load-theme 'doom-sourcerer)
))

;; (unless (display-graphic-p) (load-theme 'wheatgrass))
;; (unless (display-graphic-p) (load-theme 'wombat))
(unless (display-graphic-p) (load-theme 'tsdh-dark))
#+END_SRC

* Spaceline

Modeline inspired by the spacemacs distribution

#+BEGIN_SRC emacs-lisp
  ;; enable spacemacs mode-line
  (use-package spaceline
    :ensure t
    :init 
    (progn 
    ;; size of modeline
       (setq powerline-height 20)
       (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state))
    :config
    (require 'spaceline-config)
  ;;    (setq spaceline-buffer-encoding-abbrev-p nil)
  ;;    (setq spaceline-line-column-p nil)
  ;;    (setq spaceline-line-p nil)
  ;;    (setq powerline-default-separator (quote arrow))
  ;;  (spaceline-emacs-theme)
    (spaceline-spacemacs-theme)
    (setq
  ;;      spaceline-buffer-encoding-abbrev-p nil
          spaceline-window-numbers-unicode t
          )
  ;;        spaceline-minor-modes-separator nil)
          (powerline-reset)
  )

  ;; Change some powerline colors in the terminal
    (unless (display-graphic-p) 
            (set-face-background 'powerline-inactive2 "color-233")
            (set-face-foreground 'powerline-inactive2 "white")
            (set-face-background 'powerline-inactive1 "color-24")
            (set-face-foreground 'powerline-inactive1 "white")
            (set-face-background 'mode-line-inactive "color-233")
  ;;          (set-face-foreground 'mode-line-inactive "white")
    )
#+END_SRC

* Doom modeline (off)

If necessary, doom's modeline can be used (not activated now)

#+BEGIN_SRC emacs-lisp
  ;; (use-package doom-modeline
  ;;   :ensure t
  ;;   :init (doom-modeline-mode 1))
#+END_SRC

* All the icons package

I don't think this is used, but it's good to have it, just in case

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :ensure t)
#+END_SRC

* Which key passage

This displays completion options when you type emacs shortcuts. 

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode))
#+END_SRC

* Evil Mode ( ͡° ͜ʖ ͡°)

This activates the emacs evil mode, which allows most vim keybindings

emacs keybindings are also enabled in INSERT state. 

#+BEGIN_SRC emacs-lisp
;; EVIL mode buahhahahaha
(use-package evil
  :ensure t
  :init 
  (setq evil-disable-insert-state-bindings t)
;;  (setq evil-mode-line-format 'before)
  :config (evil-mode)
)
;;(setq-default mode-line-format 'before)
#+END_SRC

* Org-mode config

** Org bullets

fancy org-bullets

#+BEGIN_SRC emacs-lisp
;; Org bullets
(use-package org-bullets
  :ensure t
  :hook (org-mode . org-bullets-mode)
)
#+END_SRC

** Org indent mode

#+BEGIN_SRC emacs-lisp
;; Add org indent mode
(add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC

** Line wrapping in org-mode

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 
          '(lambda () (visual-line-mode 1)))
#+END_SRC

* Minor fixes

** Line and column numbers

#+BEGIN_SRC emacs-lisp
(setq line-number-mode t)
(setq column-number-mode t)
#+END_SRC

** Electric pair mode

Automatically pair matching parenthesis ()

#+BEGIN_SRC emacs-lisp 
;; electric pair mode
(electric-pair-mode t)
#+END_SRC

** color code different parenthesis

#+BEGIN_SRC emacs-lisp
;; color code parenthesis
(use-package rainbow-delimiters
  :ensure t
  :init 
  (add-hook 'prod-mode-hook #'rainbow-delimiters-mode)
)
#+END_SRC

** Scrolling behavior

Scroll 1 line at a time.

#+BEGIN_SRC emacs-lisp
;; Change scrolling behavior
(setq scroll-conservatively 100)
#+END_SRC

** Disable bell sound

#+BEGIN_SRC emacs-lisp
;; Disable bell sound
(setq ring-bell-function 'ignore)
#+END_SRC

** Highlight cursor line

#+BEGIN_SRC emacs-lisp
;; Highlite cursor line
(global-hl-line-mode t)
#+END_SRC

** Disable auto-indent mode(electric indent mode)

#+BEGIN_SRC emacs-lisp
;; disable auto-indent mode
(when (fboundp 'electric-indent-mode) (electric-indent-mode -1))
#+END_SRC

** Disable emacs startup screen

#+BEGIN_SRC emacs-lisp
;; Disable startup screen.
(setq inhibit-startup-screen t)
#+END_SRC

** Enable ibuffer

#+BEGIN_SRC emacs-lisp
;; enable ibuffer
(global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

** Follow window splits

Make cursor go to new window after a split

#+BEGIN_SRC emacs-lisp
(defun split-and-follow-horizontally ()
  (interactive)
  (split-window-below)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

(defun split-and-follow-vertically ()
  (interactive)
  (split-window-right)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC

** Highlight matching parentheses
(asdas dasd a)
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
(set-face-background 'show-paren-match "grey40")
#+END_SRC

#+RESULTS:

* IDO-mode package (currently disabled)

This is the emacs default alternative to ivy. Disabled. 

#+BEGIN_SRC emacs-lisp
;; enable IDO mode :: alternative to ivy, below.
;; (setq ido-enable-flex-matching nil)
;; (setq ido-create-new-buffer 'always)
;; (setq ido-everywhere t)
;; (ido-mode 1)

;; ;; enable IDO vertical mode
;; (use-package ido-vertical-mode
;;   :ensure t
;;   :init (ido-vertical-mode 1))

;; ;; Enable smex : like IDO but for M-x
;; (use-package smex
;;   :ensure t
;;   :init (smex-initialize)
;;   :bind ("M-x" . smex)
;; )
#+END_SRC

* IVY and swiper

For completion of file and buffer selection, etc....

swiper is a better search package (C-s)

#+BEGIN_SRC emacs-lisp
;; Ivy for completion. 
(use-package ivy
  :ensure t
  :config (ivy-mode 1)
)

;; swiper for faster search
(use-package swiper
  :ensure t
  :bind ("C-s" . swiper)
)
#+END_SRC

* Flyspell (spellcheck)

#+BEGIN_SRC emacs-lisp
(use-package flyspell
   :ensure t
   :hook 
   (org-mode . flyspell-mode)
   (prog-mode . flyspell-prog-mode)     
)
#+END_SRC

* Programing specifics

** Fortran 

GAMESS uses src for F77 files.

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.src\\'" . fortran-mode))

;; setup files with .f90 to be read as f90
(add-to-list 'auto-mode-alist '("\\.f90\\'" . f90-mode))
(add-to-list 'auto-mode-alist '("\\.F90\\'" . f90-mode))
#+END_SRC











* General Package

The general package adds space leader key style keybindings.

Taken from https://github.com/suyashbire1/emacs.d/blob/master/init.el

#+BEGIN_SRC emacs-lisp
(use-package general
  :ensure t
  :after which-key
  :config
  (general-override-mode 1)

  (defun find-user-init-file ()
    "Edit the `user-init-file', in same window."
    (interactive)
    (find-file user-init-file))
  (defun load-user-init-file ()
    "Load the `user-init-file', in same window."
    (interactive)
    (load-file user-init-file))

  ;;Taken from http://emacsredux.com/blog/2013/05/04/rename-file-and-buffer/
  (defun rename-file-and-buffer ()
    "Rename the current buffer and file it is visiting."
    (interactive)
    (let ((filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (message "Buffer is not visiting a file!")
        (let ((new-name (read-file-name "New name: " filename)))
          (cond
           ((vc-backend filename) (vc-rename-file filename new-name))
           (t
            (rename-file filename new-name t)
            (set-visited-file-name new-name t t)))))))


  (defun disable-all-themes ()
    "disable all active themes."
    (dolist (i custom-enabled-themes)
      (disable-theme i)))

  (defadvice load-theme (before disable-themes-first activate)
    (disable-all-themes))

  ;; Following lines to cycle through themes adapted from ivan's answer on
  ;; https://emacs.stackexchange.com/questions/24088/make-a-function-to-toggle-themes
  (setq my/themes (custom-available-themes))
  (setq my/themes-index 0)

  (defun my/cycle-theme ()
    "Cycles through my themes."
    (interactive)
    (setq my/themes-index (% (1+ my/themes-index) (length my/themes)))
    (my/load-indexed-theme))

  (defun my/load-indexed-theme ()
    (load-theme (nth my/themes-index my/themes)))

  (defun load-leuven-theme ()
    "Loads `leuven' theme"
    (interactive)
    (load-theme 'leuven))

  (defun load-dichromacy-theme ()
    "Loads `dichromacy' theme"
    (interactive)
    (load-theme 'dichromacy))

  (general-create-definer tyrant-def
    :states '(normal visual insert motion emacs)
    :prefix "SPC"
    :non-normal-prefix "C-SPC")

  (general-create-definer despot-def
    :states '(normal insert)
    :prefix "SPC"
    :non-normal-prefix "C-SPC")

  (general-define-key
    :keymaps 'key-translation-map
    "ESC" (kbd "C-g"))

  (general-def
    "C-x x" 'eval-defun)

  (tyrant-def

    ""     nil
    "c"   (general-simulate-key "C-c")
    "h"   (general-simulate-key "C-h")
    "u"   (general-simulate-key "C-u")
    "x"   (general-simulate-key "C-x")
    "<SPC>" (general-simulate-key "M-x")

    ;; Package manager
    "lp"  'list-packages

    ;; Theme operations
    "t"   '(:ignore t :which-key "themes")
    "tn"  'my/cycle-theme
    "tt"  'load-theme
    "tl"  'load-leuven-theme
    "td"  'load-dichromacy-theme

    ;; Quit operations
    "q"	  '(:ignore t :which-key "quit emacs")
    "qq"  'kill-emacs
    "qz"  'delete-frame

    ;; Buffer operations
    "b"   '(:ignore t :which-key "buffer")
    "bb"  'mode-line-other-buffer
    "bd"  'kill-this-buffer
    "b]"  'next-buffer
    "b["  'previous-buffer
    "bq"  'kill-buffer-and-window
    "bR"  'rename-file-and-buffer
    "br"  'revert-buffer

    ;; Window operations
    "w"   '(:ignore t :which-key "window")
    "wm"  'maximize-window
    "w/"  'split-window-horizontally
    "wv"  'split-window-vertically
    "wm"  'maximize-window
    "wu"  'winner-undo
    "ww"  'other-window
    "wd"  'delete-window
    "wD"  'delete-other-windows

    ;; File operations
    "f"   '(:ignore t :which-key "files")
    "fc"  'write-file
    "fe"  '(:ignore t :which-key "emacs")
    "fed" 'find-user-init-file
    "feR" 'load-user-init-file
    "fj"  'dired-jump
    "fl"  'find-file-literally
    "fR"  'rename-file-and-buffer
    "fs"  'save-buffer

    ;; Applications
    "a"   '(:ignore t :which-key "Applications")
    "ad"  'dired
    ":"   'shell-command
    ";"   'eval-expression
    "ac"  'calendar
    "oa"  'org-agenda)

  (general-def 'normal doc-view-mode-map
    "j"   'doc-view-next-line-or-next-page
    "k"   'doc-view-previous-line-or-previous-page
    "gg"  'doc-view-first-page
    "G"   'doc-view-last-page
    "C-d" 'doc-view-scroll-up-or-next-page
    "C-f" 'doc-view-scroll-up-or-next-page
    "C-b" 'doc-view-scroll-down-or-previous-page)

  (general-def '(normal visual) outline-minor-mode-map
    "zn"  'outline-next-visible-heading
    "zp"  'outline-previous-visible-heading
    "zf"  'outline-forward-same-level
    "zB"  'outline-backward-same-level)

  (general-def 'normal package-menu-mode-map
    "i"   'package-menu-mark-install
    "U"   'package-menu-mark-upgrades
    "d"   'package-menu-mark-delete
    "u"   'package-menu-mark-unmark
    "x"   'package-menu-execute
    "q"   'quit-window)

  (general-def 'normal calendar-mode-map
    "h"   'calendar-backward-day
    "j"   'calendar-forward-week
    "k"   'calendar-backward-week
    "l"   'calendar-forward-day
    "0"   'calendar-beginning-of-week
    "^"   'calendar-beginning-of-week
    "$"   'calendar-end-of-week
    "["   'calendar-backward-year
    "]"   'calendar-forward-year
    "("   'calendar-beginning-of-month
    ")"   'calendar-end-of-month
    "SPC" 'scroll-other-window
    "S-SPC" 'scroll-other-window-down
    "<delete>" 'scroll-other-window-down
    "<"   'calendar-scroll-right
    ">"   'calendar-scroll-left
    "C-b" 'calendar-scroll-right-three-months
    "C-f" 'calendar-scroll-left-three-months
    "{"   'calendar-backward-month
    "}"   'calendar-forward-month
    "C-k" 'calendar-backward-month
    "C-j" 'calendar-forward-month
    "gk"  'calendar-backward-month
    "gj"  'calendar-forward-month
    "v"   'calendar-set-mark
    "."   'calendar-goto-today
    "q"   'calendar-exit))

(use-package suggest
  :general (tyrant-def "as" 'suggest))

#+END_SRC

#+RESULTS:
